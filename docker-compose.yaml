version: '3'
services:
    jaeger-all-in-one:
        image: jaegertracing/all-in-one:latest
        restart: always
        ports:
            - '16686:16686'
            - '14268'
            - '14250'
        networks:
            - mynetwork

    zipkin:
        image: openzipkin/zipkin:latest
        restart: always
        ports:
        - "9411:9411"
        networks:
            - mynetwork        
        healthcheck:
            test: ["CMD-SHELL", "wget --spider --no-verbose --tries=1 --timeout=5 http://localhost:9411/health || exit 1"]
            start_interval: 2s
            interval: 10s
            timeout: 5s
            retries: 3

    prometheus:
        container_name: prometheus
        image: prom/prometheus:latest
        restart: always
        volumes:
            - ./.docker/prometheus.yaml:/etc/prometheus/prometheus.yml
        ports:
            - '9090:9090'
        networks:
            - mynetwork

    otel-collector:
        image: otel/opentelemetry-collector:latest
        restart: always
        command: ['--config=/etc/otel-collector-config.yaml']
        volumes:
            - ./.docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
        ports:
            - '8888:8888' # Prometheus metrics exposed by the collector
            - '8889:8889' # Prometheus exporter metrics
            - '4317:4317' # OTLP gRPC receiver -> porta principal
            - '55679:55679' # zpages extension
        networks:
            - mynetwork

    grafana:
        container_name: grafana
        image: grafana/grafana:latest
        restart: always
        ports:
            - '3001:3000'
        depends_on:
            - prometheus
        networks:
            - mynetwork

    cep:
        container_name: cep
        build:
            context: ./cep
        environment:
            - TITLE=Microservice Demo
            - CONTENT=This is a demo of a microservice
            - BACKGROUND_COLOR=green
            - RESPONSE_TIME=1000
            - REQUEST_NAME_OTEL=microservice-demo-request
            - OTEL_SERVICE_NAME=microservice-demo
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
            - HTTP_PORT=8080
        ports:
            - '8080:8080'
        depends_on:
            - jaeger-all-in-one
            - prometheus
            - otel-collector
            - zipkin
        networks:
            - mynetwork
    weather:
        container_name: weather
        build:
            context: ./weather
        environment:
            - TITLE=Microservice Demo 2
            - CONTENT=This is a demo of a microservice
            - REQUEST_NAME_OTEL=microservice-demo2-request
            - OTEL_SERVICE_NAME=microservice-demo2
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
        ports:
            - '50051:50051'
        depends_on:
            - jaeger-all-in-one
            - prometheus
            - otel-collector
            - zipkin
            - cep
        networks:
            - mynetwork
networks:
    mynetwork:
        driver: bridge
